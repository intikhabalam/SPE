name: Deploy SharePoint Container

on:
  workflow_dispatch:
  push:
    branches:
      - main    
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy_sharepoint_container:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # - name: Azure Login
    #   uses: azure/login@v1
    #   with:
    #     client-id: ${{ secrets.AZURE_SERVICEPRINCIPAL_CLIENT_ID }}
    #     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
    #     subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    #     allow-no-subscriptions: true

    - name: Install Az module
      run: |
        Install-Module -Name Az -Scope CurrentUser -Force
        Get-Module -Name Az -ListAvailable
      shell: pwsh

    - name: Create API permissions manifest file
      run: |
        echo '[
          {
            "resourceAppId": "00000003-0000-0000-c000-000000000000",
            "resourceAccess": [
              {"id": "37f7f235-527c-4136-accd-4a02d197296e", "type": "Scope"},
              {"id": "14dad69e-099b-42c9-810b-d002981feec1", "type": "Scope"},
              {"id": "7427e0e9-2fba-42fe-b0c0-848c9e6a8182", "type": "Scope"},
              {"id": "085ca537-6565-41c2-aca7-db852babc212", "type": "Scope"},
              {"id": "e1fe6dd8-ba31-4d61-89e7-88639da4683d", "type": "Scope"},
              {"id": "40dc41bc-0f7e-42ff-89bd-d9516947e474", "type": "Role"}
            ]
          },
          {
            "resourceAppId": "00000003-0000-0ff1-ce00-000000000000",
            "resourceAccess": [
              {"id": "4d114b1a-3649-4764-9dfb-be1e236ff371", "type": "Scope"},
              {"id": "19766c1b-905b-43af-8756-06526ab42875", "type": "Role"},
              {"id": "640ddd16-e5b7-4d71-9690-3f4022699ee7", "type": "Scope"}
            ]
          }
        ]' > manifest.json

        echo "API permissions manifest file created"

    - name: Print manifest.json file and path
      run: |
        echo "Contents of manifest.json:"
        cat manifest.json
        echo "Path to manifest.json: $(pwd)/manifest.json"
      
    - name: Extracting variables from Parameters JSON file
      id: extract_parameters2
      run: |
        OWNING_APP_REGISTRATION_NAME=$(jq -r '.parameters.owningAppRegName.value' .github/workflows/parameters.json)
        SHAREPOINT_ADMIN_SITE_URL=$(jq -r '.parameters.sharepointAdminSiteUrl.value' .github/workflows/parameters.json)
        CONTAINER_TYPE_NAME=$(jq -r '.parameters.containerTypeName.value' .github/workflows/parameters.json)
        RESOURCE_GROUP_NAME=$(jq -r '.parameters.resourceGroupName.value' .github/workflows/parameters.json)

        echo "OWNING_APP_REGISTRATION_NAME=$OWNING_APP_REGISTRATION_NAME" >> $GITHUB_ENV
        echo "SHAREPOINT_ADMIN_SITE_URL=$SHAREPOINT_ADMIN_SITE_URL" >> $GITHUB_ENV
        echo "CONTAINER_TYPE_NAME=$CONTAINER_TYPE_NAME" >> $GITHUB_ENV
        echo "RESOURCE_GROUP_NAME=$RESOURCE_GROUP_NAME" >> $GITHUB_ENV

        echo $OWNING_APP_REGISTRATION_NAME
        echo $SHAREPOINT_ADMIN_SITE_URL
        echo $CONTAINER_TYPE_NAME
        echo $RESOURCE_GROUP_NAME
        echo "##########################################################################"

    - name: Run PowerShell Script to Create App Registration and Set Permissions
      shell: pwsh
      run: |
        # Connect to Azure using device login
        az login --use-device-code

        # Path to the manifest file
        $manifestPath = "$(pwd)/manifest.json"

        $appName = "${{ env.OWNING_APP_REGISTRATION_NAME }}"
        $existingApp = @(az ad sp list --display-name $appName --query "[0]" --output json)
        if ($existingApp.Length -ne 1 ) {
          Write-Host "App registration already exists."
          $appId = $existingApp.appId
        } else {
          Write-Host "Creating new app registration."
          $newApp = az ad app create --display-name $appName --required-resource-accesses @$manifestPath --query "{appId: appId, objectId: objectId}" --output json
          # $newApp = az ad app create --display-name $appName --required-resource-accesses @manifest.json --query "{appId: appId, objectId: objectId}" --output json
          $appId = $newApp.appId
          $objectId = $newApp.objectId
          echo "OWNING_APP_REGISTRATION_ID=$appId" >> $GITHUB_ENV

          $secret = az ad sp credential reset --id $appId --query "password" -o tsv

          # Export the secret as a GitHub Actions environment variable
          echo "OWNING_APP_REGISTRATION_SECRET=$secret" >> $GITHUB_ENV

          Write-Host "Client Secret has been stored as an environment variable."
        }




        

    # - name: Uninstall legacy PnP PowerShell module
    #   run: |
    #     if (Get-Module -ListAvailable -Name SharePointPnPPowerShellOnline) {
    #       Uninstall-Module -Name SharePointPnPPowerShellOnline -AllVersions -Force
    #     }
    #   shell: pwsh
  
    - name: Install new PnP PowerShell module
      run: |
        Install-Module -Name PnP.PowerShell -Scope CurrentUser -Force -AllowPrerelease -SkipPublisherCheck
        # Validate installation
        Get-Module -Name PnP.PowerShell -ListAvailable
      shell: pwsh            


    - name: Run PowerShell Script to Create Container Type
      shell: pwsh
      run: |

        #Import-Module -Name PnP.PowerShell -AllowPrerelease -SkipPublisherCheck

        # Connect to SharePoint Online
        Connect-PnPOnline -Url $env:SHAREPOINT_ADMIN_SITE_URL -DeviceLogin

        # Your PnP PowerShell commands
        Write-Host "Hello World"
        
        # Get container type information
        $containerType = Get-PnPContainerType

        # Check if container type already exists
        if (-not $containerType) {New-PnPContainerType -TrialContainerType -ContainerTypeName $env:CONTAINER_TYPE_NAME -OwningApplicationId $env:OWNING_APP_REGISTRATION_ID}
        else {Write-Host "Container type already exists."}

        # Get container type information
        #$containerType = New-PnPContainerType -TrialContainerType -ContainerTypeName $env:CONTAINER_TYPE_NAME -OwningApplicationId $env:OWNING_APP_REGISTRATION_ID

        # Store each value in a separate variable
        $ContainerTypeId = $containerType.ContainerTypeId
        $ContainerTypeName = $containerType.ContainerTypeName
        $OwningApplicationId = $containerType.OwningApplicationId
        $Classification = $containerType.Classification
        $AzureSubscriptionId = $containerType.AzureSubscriptionId
        $ResourceGroup = $containerType.ResourceGroup

        # Output each value
        Write-Host "ContainerTypeId: $ContainerTypeId"
        Write-Host "ContainerTypeName: $ContainerTypeName"
        Write-Host "OwningApplicationId: $OwningApplicationId"
        Write-Host "Classification: $Classification"
        Write-Host "AzureSubscriptionId: $AzureSubscriptionId"
        Write-Host "ResourceGroup: $ResourceGroup"

