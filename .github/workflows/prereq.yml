name: Deploy SharePoint Container

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy_sharepoint_container:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get install jq

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Install Az module
        run: |
          Install-Module -Name Az -Scope CurrentUser -Force
          Get-Module -Name Az -ListAvailable
        shell: pwsh

      - name: Extract variables from Parameters JSON file
        id: extract_parameters2
        run: |
          RESOURCE_GROUP_NAME=$(jq -r '.parameters.resourcePrefix.value' .github/workflows/parameters.json)
          LOCATION=$(jq -r '.parameters.location.value' .github/workflows/parameters.json)

          echo "RESOURCE_GROUP_NAME=$RESOURCE_GROUP_NAME-ResGrp" >> $GITHUB_ENV
          echo "STATIC_WEB_APP_NAME=$RESOURCE_GROUP_NAME-StaticWebApp" >> $GITHUB_ENV
          echo "SPE_APP_NAME=$RESOURCE_GROUP_NAME-Spe_App_Reg" >> $GITHUB_ENV         
          echo "LOCATION=$LOCATION" >> $GITHUB_ENV
          echo "CONTAINER_TYPE_NAME=$RESOURCE_GROUP_NAME-ContainerType" >> $GITHUB_ENV
          

          echo $RESOURCE_GROUP_NAME
          echo $STATIC_WEB_APP_NAME
          echo $SPE_APP_NAME
          echo $CONTAINER_TYPE_NAME
          echo $LOCATION
          echo "##########################################################################"

      - name: Create API permissions manifest file
        run: |
          echo '[
            {
              "resourceAppId": "00000003-0000-0000-c000-000000000000",
              "resourceAccess": [
                {"id": "37f7f235-527c-4136-accd-4a02d197296e", "type": "Scope"},
                {"id": "14dad69e-099b-42c9-810b-d002981feec1", "type": "Scope"},
                {"id": "7427e0e9-2fba-42fe-b0c0-848c9e6a8182", "type": "Scope"},
                {"id": "085ca537-6565-41c2-aca7-db852babc212", "type": "Scope"},
                {"id": "e1fe6dd8-ba31-4d61-89e7-88639da4683d", "type": "Scope"},
                {"id": "40dc41bc-0f7e-42ff-89bd-d9516947e474", "type": "Role"}
              ]
            },
            {
              "resourceAppId": "00000003-0000-0ff1-ce00-000000000000",
              "resourceAccess": [
                {"id": "4d114b1a-3649-4764-9dfb-be1e236ff371", "type": "Scope"},
                {"id": "19766c1b-905b-43af-8756-06526ab42875", "type": "Role"},
                {"id": "640ddd16-e5b7-4d71-9690-3f4022699ee7", "type": "Scope"}
              ]
            }
          ]' > manifest.json

          echo "API permissions manifest file created"

      - name: Create JSON file for reply URLs with types
        run: |
          cat <<EOF > replyUrlsWithType.json
          [
              {
                  "url": "http://localhost:7071/",
                  "type": "Spa"
              },
              {
                  "url": "http://localhost:3000/",
                  "type": "Spa"
              },
              {
                  "url": "https://agreeable-cliff-051b8dd10.5.azurestaticapps.net/",
                  "type": "Spa"
              },
              {
                  "url": "https://proud-bay-08ee10810.5.azurestaticapps.net/",
                  "type": "Spa"
              },
              {
                  "url": "https://ashy-bay-0a679a810.5.azurestaticapps.net/",
                  "type": "Spa"
              },
              {
                  "url": "https://lemon-smoke-0de0c8110.5.azurestaticapps.net/",
                  "type": "Spa"
              },
          {
              "url": "http://localhost/",
              "type": "Spa"
          }
          ]
          EOF

      - name: Print manifest.json file and path
        run: |
          echo "Contents of manifest.json:"
          cat manifest.json
          echo "Path to manifest.json: $(pwd)/manifest.json"

      - name: Install new PnP PowerShell module
        run: |
          Install-Module -Name PnP.PowerShell -Scope CurrentUser -Force -AllowPrerelease -SkipPublisherCheck
          # Validate installation
          Get-Module -Name PnP.PowerShell -ListAvailable
        shell: pwsh

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_SERVICEPRINCIPAL_CLIENT_ID_PKSDEMO }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID_PKSDEMO }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_PKSDEMO }}
          allow-no-subscriptions: true

      - name: Check if Resource Group exists
        id: check_resource_group
        run: |
          if az group show --name ${{ env.RESOURCE_GROUP_NAME }} &>/dev/null; then
            echo "Resource Group ${{ env.RESOURCE_GROUP_NAME }} already exists"
            echo "::set-output name=rg_exists::true"
          else
            az group create --name ${{ env.RESOURCE_GROUP_NAME }} --location "${{ env.LOCATION }}"
            echo "Resource Group created."
          fi
      - name: Check if Static Web App exists
        id: check_static_webapp
        run: |
          if ! az staticwebapp show --name ${{ env.STATIC_WEB_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} &>/dev/null; then
            echo "Static Web App does not exist."
            echo "staticWebApp_exists=false" >> $GITHUB_ENV
          else
            echo "Static Web App exists."
            echo "staticWebApp_exists=true" >> $GITHUB_ENV
          fi

      - name: Deploy Azure Static Webapp
        id: create_azure_static_webapp
        run: |
          az deployment group create --resource-group ${{ env.RESOURCE_GROUP_NAME }} --template-file .github/workflows/staticwebapp.bicep --parameters .github/workflows/parameters.json --parameters resourceGroupName=${{ env.RESOURCE_GROUP_NAME }} --parameters staticWebAppName=${{ env.STATIC_WEB_APP_NAME }}

      - name: Create Service Principal and Get Credentials
        shell: pwsh
        run: |
          # Connect to Azure using device login
          az login --use-device-code

          # Create a certificate for the Service Principal
          $certOutput = az ad sp create-for-rbac -n ${{ env.SPE_APP_NAME }} --create-cert

          # Extract the certificate file path
          $certObject = $certOutput | ConvertFrom-Json
          $certPath = $certObject.fileWithCertAndPrivateKey

          # Read the certificate content and extract only the private key
          $certContent = Get-Content $certPath -Raw
          $certContent = $certContent -replace '(?s)^.*?(-----BEGIN PRIVATE KEY-----.*?-----END PRIVATE KEY-----).*$', '$1'


          # Store the private key content in an environment variable
          echo "PRIVATE_KEY=$certContent" >> $GITHUB_ENV

          # Create Service Principal
          $spId = az ad sp create-for-rbac --role contributor --scopes /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID_PKSDEMO }} -n ${{ env.SPE_APP_NAME }}

          # Convert the JSON output to a PowerShell object
          $spObject = $spId | ConvertFrom-Json

          # Extract the required values
          $reactAppAzureAppId = $spObject.appId
          $displayName = $spObject.displayName
          $reactAppAzureSecret = $spObject.password

          # Update the application with redirect URIs
          az ad app update --id $reactAppAzureAppId --web-redirect-uris  "https://localhost/signout-oidc" "https://localhost/Onboarding/ProcessCode" "https://localhost/signin-oidc" "https://oauth.pstmn.io/v1/callback" "https://oauth.pstmn.io/v1/browser-callback" "http://localhost/redirect"

          # Print the values
          Write-Host "App ID: $reactAppAzureAppId"
          Write-Host "Display Name: $displayName"

          # Store values in environment variables
          echo "REACT_APP_AZURE_APP_ID=$reactAppAzureAppId" >> $GITHUB_ENV
          echo "REACT_APP_AZURE_APP_SECRET=$reactAppAzureSecret" >> $GITHUB_ENV
          echo "DISPLAY_NAME=$displayName" >> $GITHUB_ENV

          # Path to the manifest file
          $manifestPath = "$(pwd)/manifest.json"

          Write-Host "app id environment variable: $reactAppAzureAppId"

          az ad app update --id $reactAppAzureAppId --required-resource-accesses @$manifestPath
          az ad app permission admin-consent --id $reactAppAzureAppId

          $objectId = az ad app show --id $reactAppAzureAppId --query id -o tsv
          Write-Output "The Object ID is: $objectId"

          # Perform Azure REST API call to retrieve key credentials
          $response = az rest --method GET --url "https://graph.microsoft.com/v1.0/applications/$objectId/keyCredentials"
          Write-Output "The response ID is: $response"

          $certificateThumbPrint = az rest --method GET --url "https://graph.microsoft.com/v1.0/applications/$objectId/keyCredentials" | Select-String -Pattern '"customKeyIdentifier": "([^"]+)"' | ForEach-Object { $_.Matches.Groups[1].Value }

          # Print the Thumbprint to verify
          Write-Output "The certificate ThumbPrint is: $certificateThumbPrint"

          # Update the Azure Static Webapp Settings
          az staticwebapp appsettings set --name ${{ env.STATIC_WEB_APP_NAME }} --setting-names "SPE_CONTAINER_TYPE_ID=$ContainerTypeId" "AZURE_CLIENT_SECRET=$reactAppAzureSecret" "AZURE_CLIENT_ID=$reactAppAzureAppId"

          Write-Host "####################################################################"
          Write-Host "####################################################################"

          # Connect to SharePoint Online
          Connect-PnPOnline -Url $env:SHAREPOINT_ADMIN_SITE_URL_PKSDEMO -DeviceLogin

          # Your PnP PowerShell commands
          Write-Host "Hello World"
          Write-Host "$reactAppAzureAppId"

          # Get container type information
          $containerType = Get-PnPContainerType

          # Check if container type already exists
          if (-not $containerType) {
            New-PnPContainerType -TrialContainerType -ContainerTypeName ${{ env.CONTAINER_TYPE_NAME }} -OwningApplicationId $reactAppAzureAppId
          } else {
            Write-Host "Container type already exists."
          }

          # Get container type information
          $containerType = Get-PnPContainerType

          # Store each value in a separate variable
          $ContainerTypeId = $containerType.ContainerTypeId
          echo "CONTAINER_TYPE_ID=$ContainerTypeId" >> $GITHUB_ENV

          $ContainerTypeName = $containerType.ContainerTypeName
          $OwningApplicationId = $reactAppAzureAppId
          $Classification = $containerType.Classification

          # Output each value
          Write-Host "ContainerTypeId: $ContainerTypeId"
          Write-Host "ContainerTypeName: $ContainerTypeName"
          Write-Host "OwningApplicationId: $OwningApplicationId"
          Write-Host "Classification: $Classification"
          Write-Host "ClientID: $reactAppAzureAppId"
          Write-Host "ClientSecret: $reactAppAzureSecret"
          Write-Host "ConsumingTenantId: $OwningApplicationId"
          Write-Host "RootSiteUrl: $env:SHAREPOINT_ADMIN_SITE_URL_PKSDEMO"

          Write-Host "Certificate Path: $certPath"
          Write-Host "Private Key Content: $certContent"


          # Connect to Azure using device login
          az login --use-device-code

          # Update the Azure Static Webapp Settings
          az staticwebapp appsettings set --name ${{ env.STATIC_WEB_APP_NAME }} --setting-names "SPE_CONTAINER_TYPE_ID=$ContainerTypeId" "AZURE_CLIENT_SECRET=$reactAppAzureSecret" "AZURE_CLIENT_ID=$reactAppAzureAppId"

        env:
          SHAREPOINT_ADMIN_SITE_URL_PKSDEMO: ${{ vars.SHAREPOINT_ADMIN_SITE_URL_PKSDEMO }}
