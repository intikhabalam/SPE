name: Deploy SharePoint Container

on:
  workflow_dispatch:
  push:
    branches:
      - main    
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy_sharepoint_container:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install jq
      run: sudo apt-get install jq

    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    - name: Install Az module
      run: |
        Install-Module -Name Az -Scope CurrentUser -Force
        Get-Module -Name Az -ListAvailable
      shell: pwsh

    - name: Extract variables from Parameters JSON file
      id: extract_parameters2
      run: |
        OWNING_APP_REGISTRATION_NAME=$(jq -r '.parameters.owningAppRegName.value' .github/workflows/parameters.json)
        SHAREPOINT_ADMIN_SITE_URL=$(jq -r '.parameters.sharepointAdminSiteUrl.value' .github/workflows/parameters.json)
        CONTAINER_TYPE_NAME=$(jq -r '.parameters.containerTypeName.value' .github/workflows/parameters.json)
        RESOURCE_GROUP_NAME=$(jq -r '.parameters.resourceGroupName.value' .github/workflows/parameters.json)

        echo "OWNING_APP_REGISTRATION_NAME=$OWNING_APP_REGISTRATION_NAME" >> $GITHUB_ENV
        echo "SHAREPOINT_ADMIN_SITE_URL=$SHAREPOINT_ADMIN_SITE_URL" >> $GITHUB_ENV
        echo "CONTAINER_TYPE_NAME=$CONTAINER_TYPE_NAME" >> $GITHUB_ENV
        echo "RESOURCE_GROUP_NAME=$RESOURCE_GROUP_NAME" >> $GITHUB_ENV

        echo $OWNING_APP_REGISTRATION_NAME
        echo $SHAREPOINT_ADMIN_SITE_URL
        echo $CONTAINER_TYPE_NAME
        echo $RESOURCE_GROUP_NAME
        echo "##########################################################################"

    - name: Create API permissions manifest file
      run: |
        echo '[
          {
            "resourceAppId": "00000003-0000-0000-c000-000000000000",
            "resourceAccess": [
              {"id": "37f7f235-527c-4136-accd-4a02d197296e", "type": "Scope"},
              {"id": "14dad69e-099b-42c9-810b-d002981feec1", "type": "Scope"},
              {"id": "7427e0e9-2fba-42fe-b0c0-848c9e6a8182", "type": "Scope"},
              {"id": "085ca537-6565-41c2-aca7-db852babc212", "type": "Scope"},
              {"id": "e1fe6dd8-ba31-4d61-89e7-88639da4683d", "type": "Scope"},
              {"id": "40dc41bc-0f7e-42ff-89bd-d9516947e474", "type": "Role"}
            ]
          },
          {
            "resourceAppId": "00000003-0000-0ff1-ce00-000000000000",
            "resourceAccess": [
              {"id": "4d114b1a-3649-4764-9dfb-be1e236ff371", "type": "Scope"},
              {"id": "19766c1b-905b-43af-8756-06526ab42875", "type": "Role"},
              {"id": "640ddd16-e5b7-4d71-9690-3f4022699ee7", "type": "Scope"}
            ]
          }
        ]' > manifest.json

        echo "API permissions manifest file created"

    - name: Print manifest.json file and path
      run: |
        echo "Contents of manifest.json:"
        cat manifest.json
        echo "Path to manifest.json: $(pwd)/manifest.json"

    - name: Create Service Principal and Get Credentials
      shell: pwsh
      run: |
        # Connect to Azure using device login
        az login --use-device-code
        
        # Create a certificate for the Service Principal
        $certOutput = az ad sp create-for-rbac -n ${{ env.OWNING_APP_REGISTRATION_NAME }} --create-cert

        # Extract the certificate file path
        $certObject = $certOutput | ConvertFrom-Json
        $certPath = $certObject.fileWithCertAndPrivateKey

        # Read the certificate content and extract only the private key
        $certContent = Get-Content $certPath -Raw
        # $privateKey = ($certContent -split "\n" | Select-String -Pattern "-----BEGIN PRIVATE KEY-----.*-----END PRIVATE KEY-----").ToString()

        echo "Certificate Path: $certPath"
        echo "Private Key Content: $certContent"

        # Store the private key content in an environment variable
        echo "PRIVATE_KEY=$certContent" >> $GITHUB_ENV

        # Create Service Principal
        $spId = az ad sp create-for-rbac --role contributor --scopes /subscriptions/66d212d1-7764-4f08-9839-1a52bd537059 -n ${{ env.OWNING_APP_REGISTRATION_NAME }}

        # Convert the JSON output to a PowerShell object
        $spObject = $spId | ConvertFrom-Json

        # Extract the required values
        $appId = $spObject.appId
        $displayName = $spObject.displayName
        $password = $spObject.password
        $tenant = $spObject.tenant

        # Print the values
        Write-Host "App ID: $appId"
        Write-Host "Display Name: $displayName"
        Write-Host "Password: $password"
        Write-Host "Tenant: $tenant"

        # Store values in environment variables
        echo "APP_ID=$appId" >> $GITHUB_ENV
        echo "DISPLAY_NAME=$displayName" >> $GITHUB_ENV
        echo "PASSWORD=$password" >> $GITHUB_ENV
        echo "TENANT=$tenant" >> $GITHUB_ENV

        # Path to the manifest file
        $manifestPath = "$(pwd)/manifest.json"
        
        echo "app id environment variable: $appId"

        # Update the app with required resources
        az ad app update --id $appId --required-resource-accesses @$manifestPath

    - name: Install new PnP PowerShell module
      run: |
        Install-Module -Name PnP.PowerShell -Scope CurrentUser -Force -AllowPrerelease -SkipPublisherCheck
        # Validate installation
        Get-Module -Name PnP.PowerShell -ListAvailable
      shell: pwsh

    - name: Run PowerShell Script to Create Container Type
      shell: pwsh
      run: |
        # Connect to SharePoint Online
        Connect-PnPOnline -Url $env:SHAREPOINT_ADMIN_SITE_URL -DeviceLogin

        # Your PnP PowerShell commands
        Write-Host "Hello World"
        Write-Host "$env:APP_ID"

        # Get container type information
        $containerType = Get-PnPContainerType

        # Check if container type already exists
        if (-not $containerType) {
          New-PnPContainerType -TrialContainerType -ContainerTypeName $env:CONTAINER_TYPE_NAME -OwningApplicationId $env:APP_ID
        } else {
          Write-Host "Container type already exists."
        }

        # Get container type information
        $containerType = Get-PnPContainerType

        # Store each value in a separate variable
        $ContainerTypeId = $containerType.ContainerTypeId
        $ContainerTypeName = $containerType.ContainerTypeName
        $OwningApplicationId = $containerType.OwningApplicationId
        $Classification = $containerType.Classification
        $AzureSubscriptionId = $containerType.AzureSubscriptionId
        $ResourceGroup = $containerType.ResourceGroup

        # Output each value
        Write-Host "ContainerTypeId: $ContainerTypeId"
        Write-Host "ContainerTypeName: $ContainerTypeName"
        Write-Host "OwningApplicationId: $OwningApplicationId"
        Write-Host "Classification: $Classification"
        Write-Host "AzureSubscriptionId: $AzureSubscriptionId"
        Write-Host "ResourceGroup: $ResourceGroup"
