name: Deploy Static Web App

on:
  workflow_dispatch:
  push:
    branches:
      - main    
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy_infrastructure:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_SERVICEPRINCIPAL_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        allow-no-subscriptions: true


    # deploy in pksmicrosoftcorp
    # - name: Azure Login
    #   uses: azure/login@v1
    #   with:
    #     client-id: "1e01ff43-61a4-4c80-b865-e4dd62e0feee"
    #     tenant-id: "80133990-1076-49d7-b8ee-1d5098569f89"
    #     subscription-id: "2c87d256-12aa-44d7-b1e8-8c17d95ea37f"
    #     allow-no-subscriptions: true

    - name: Extracting variables from Parameters JSON file
      id: extract_rg_location
      run: |
        RESOURCE_GROUP_NAME=$(jq -r '.parameters.resourceGroupName.value' .github/workflows/parameters.json)
        STATIC_WEB_APP_NAME=$(jq -r '.parameters.staticWebAppName.value' .github/workflows/parameters.json)
        LOCATION=$(jq -r '.parameters.location.value' .github/workflows/parameters.json)
        echo "RESOURCE_GROUP_NAME=$RESOURCE_GROUP_NAME" >> $GITHUB_ENV
        echo "STATIC_WEB_APP_NAME=$STATIC_WEB_APP_NAME" >> $GITHUB_ENV
        echo "LOCATION=$LOCATION" >> $GITHUB_ENV

    - name: Check if Resource Group exists
      id: check_resource_group
      run: |
        if az group show --name ${{ env.RESOURCE_GROUP_NAME }} &>/dev/null; then
          echo "Resource Group ${{ env.RESOURCE_GROUP_NAME }} already exists"
          echo "::set-output name=rg_exists::true"
        else
          az group create --name ${{ env.RESOURCE_GROUP_NAME }} --location "${{ env.LOCATION }}"
          echo "Resource Group created."
        fi

    - name: Check if Static Web App exists
      id: check_static_webapp
      run: |
        if ! az staticwebapp show --name ${{ env.STATIC_WEB_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} &>/dev/null; then
          echo "Static Web App does not exist."
          echo "staticWebApp_exists=false" >> $GITHUB_ENV
        else
          echo "Static Web App exists."
          echo "staticWebApp_exists=true" >> $GITHUB_ENV
        fi

    - name: Deploy Azure Static Webapp
      if: env.staticWebApp_exists == 'false'
      run: |
        az deployment group create \
          --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
          --template-file .github/workflows/staticwebapp.bicep \
          --parameters .github/workflows/parameters.json            

    - name: Check if Resource Group exists
      id: create_environment_variables
      run: |
          az staticwebapp appsettings set --name ${{ env.STATIC_WEB_APP_NAME }} --setting-names "message=Hello world"


  # build_and_deploy_code:
  #   # needs: deploy_infrastructure
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       node-version: [18.x] # Use Node.js 16.x

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2

  #   - name: Set up Node.js
  #     uses: actions/setup-node@v2
  #     with:
  #       node-version: ${{ matrix.node-version }}

  #   - name: Cache Node.js modules
  #     uses: actions/cache@v2
  #     with:
  #       path: ~/.npm
  #       key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
  #       restore-keys: |
  #         ${{ runner.os }}-node-${{ matrix.node-version }}-

  #   - name: Install dependencies (frontend)
  #     run: |
  #       cd react-client
  #       npm install

  #   - name: Extracting variables from Parameters JSON file
  #     id: extract_rg_location
  #     run: |
  #       RESOURCE_GROUP_NAME=$(jq -r '.parameters.resourceGroupName.value' .github/workflows/parameters.json)
  #       echo "RESOURCE_GROUP_NAME=$RESOURCE_GROUP_NAME" >> $GITHUB_ENV
  #       STATIC_WEB_APP_NAME=$(jq -r '.parameters.staticWebAppName.value' .github/workflows/parameters.json)
  #       echo "STATIC_WEB_APP_NAME=$STATIC_WEB_APP_NAME" >> $GITHUB_ENV

  #   - name: Azure Login
  #     uses: azure/login@v1
  #     with:
  #       client-id: ${{ secrets.AZURE_SERVICEPRINCIPAL_CLIENT_ID }}
  #       tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #       subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #       allow-no-subscriptions: true

  #   - name: Get Azure Static Webapp Site URL & Api Token
  #     id: extract_and_get_sp_root_site_url
  #     run: |
  #       STATIC_WEBAPP_TOKEN=$(az staticwebapp secrets list -n ${{ env.STATIC_WEB_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "properties.apiKey" -o tsv)
  #       echo "STATIC_WEBAPP_TOKEN=$STATIC_WEBAPP_TOKEN" >> $GITHUB_ENV
  #       STATIC_WEBAPP_URL=$(az staticwebapp show -n ${{ env.STATIC_WEB_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query "defaultHostname" -o tsv)
  #       echo "STATIC_WEBAPP_URL=$STATIC_WEBAPP_URL" >> $GITHUB_ENV

  #   - name: Build frontend
  #     run: |
  #       cd react-client
  #       CI=false npm run build # Set CI=false to avoid treating warnings as errors
  #     env:
  #       AZURE_CLIENT_ID: ${{ secrets.REACT_APP_AZURE_APP_ID }}
  #       REACT_APP_AZURE_SERVER_APP_ID: ${{ secrets.REACT_APP_AZURE_APP_ID }}
  #       REACT_APP_AZURE_APP_ID: ${{ secrets.REACT_APP_AZURE_APP_ID }}
  #       REACT_APP_SPE_CONTAINER_TYPE_ID: ${{ secrets.CONTAINER_TYPE_ID }}
  #       REACT_APP_SP_ROOT_SITE_URL: ${{ secrets.SP_ROOT_SITE_URL }}
  #       REACT_APP_SAMPLE_API_URL: ${{env.STATIC_WEBAPP_URL}}
  #       AZURE_CLIENT_CERT_THUMBPRINT: ${{secrets.REACT_APP_AZURE_APP_CLIENT_CERT_THUMBPRINT}}
  #       AZURE_CLIENT_CERT_PRIVATE_KEY:  ${{ secrets.AZURE_CLIENT_CERT_PRIVATE_KEY }}
  #       AZURE_CLIENT_SECRET: ${{ secrets.REACT_APP_AZURE_SECRET }}
  #       SPE_CONTAINER_TYPE_ID: ${{ secrets.CONTAINER_TYPE_ID }}
  #       AZURE_SPA_CLIENT_ID: ${{ secrets.AZURE_SPA_CLIENT_ID }}

  #   - name: Install dependencies (backend)
  #     run: |
  #       cd api
  #       npm install

  #   - name: Build backend
  #     run: |
  #       cd api
  #       CI=false npm run build # Set CI=false to avoid treating warnings as errors

  #   - name: Deploy to Azure Static Web Apps
  #     uses: Azure/static-web-apps-deploy@v1
  #     with:
  #       azure_static_web_apps_api_token: ${{ env.STATIC_WEBAPP_TOKEN }}
  #       repo_token: ${{ secrets.GITHUB_TOKEN }}
  #       action: 'upload'
  #       app_location: 'react-client/build'
  #       api_location: 'api'
  #       # app_build_command: 'npm run build'
  #       # api_build_command: 'npm run build'
  #       # skip_app_build: true
  #       # skip_api_build: true
  #     env:
  #       SPE_CONTAINER_TYPE_ID: ${{ secrets.CONTAINER_TYPE_ID }}
  #       AZURE_CLIENT_SECRET: ${{ secrets.REACT_APP_AZURE_SECRET }}
  #       AZURE_CLIENT_ID: ${{ secrets.REACT_APP_AZURE_APP_ID }}
  #       AZURE_CLIENT_CERT_THUMBPRINT: ${{secrets.REACT_APP_AZURE_APP_CLIENT_CERT_THUMBPRINT}}
  #       AZURE_CLIENT_CERT_PRIVATE_KEY: ${{ secrets.REACT_APP_AZURE_APP_CLIENT_CERT_PRIVATE_KEY }}         

          
