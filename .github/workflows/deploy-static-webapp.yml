name: Deploy Static Web App

on:
  workflow_dispatch:
  push:
    branches:
      - main    
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy_bicep:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        allow-no-subscriptions: true

    - name: Extract RG Name and Location from parameters.json
      id: extract_rg_location
      run: |
        RESOURCE_GROUP_NAME=$(jq -r '.parameters.staticSiteName.value' .github/workflows/parameters.json)
        LOCATION=$(jq -r '.parameters.location.value' .github/workflows/parameters.json)
        echo "RESOURCE_GROUP_NAME=$RESOURCE_GROUP_NAME" >> $GITHUB_ENV
        echo "LOCATION=$LOCATION" >> $GITHUB_ENV
    
    # - name: Check if Resource Group & Static WebApp exists
    #   id: check_rg
    #   run: |
    #     if az group show --name $RESOURCE_GROUP_NAME &> /dev/null; then
    #       echo "Resource Group already exists."
    #       if ! az staticwebapp show --name $RESOURCE_GROUP_NAME --resource-group $RESOURCE_GROUP_NAME &>/dev/null; then
    #         echo "Static WebApp does not exist."
    #         echo "staticWebApp_exists=false" >> $GITHUB_ENV
    #       else
    #         echo "Static WebApp exists."
    #         echo "staticWebApp_exists=true" >> $GITHUB_ENV
    #       fi
    #     else
    #       echo "Resource Group does not exist. Creating..."
    #       az group create --name $RESOURCE_GROUP_NAME --location "$LOCATION"
    #       echo "Resource Group created."
    #       echo "staticWebApp_exists=false" >> $GITHUB_ENV
    #     fi

    - name: Check if Resource Group exists
      id: check_resource_group
      run: |
        RG_NAME=$(jq -r '.parameters.staticSiteName.value' .github/workflows/parameters.json)

        # Check if the resource group already exists
        if az group show --name $RG_NAME &>/dev/null; then
          echo "Resource Group $RG_NAME already exists"
          echo "::set-output name=rg_exists::true"
        else
          az group create --name $RESOURCE_GROUP_NAME --location "$LOCATION"
          echo "Resource Group created."    
        fi
        
    - name: Check if Static Web App exists
      id: check_static_webapp
      run: |
        RG_NAME=$(jq -r '.parameters.staticSiteName.value' .github/workflows/parameters.json)

        # Check if the static web app already exists
        if az staticwebapp show --name $RG_NAME --resource-group $RG_NAME &>/dev/null; then
          echo "Static Web App $RG_NAME already exists"
          echo "::set-output name=webapp_exists::true"
        else
          echo "Static Web App $RG_NAME does not exist"
          echo "::set-output name=webapp_exists::false"
        fi

    - name: Deploy Bicep file
      if: steps.check_static_webapp.outputs.webapp_exists == 'false'
      run: |
        az deployment group create \
          --resource-group $RESOURCE_GROUP_NAME \
          --template-file .github/workflows/staticwebapp.bicep \
          --parameters .github/workflows/parameters.json
            

  build_and_deploy:
    needs: deploy_bicep
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x] # Use Node.js 16.x

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    - name: Cache Node.js modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node-version }}-

    - name: Install dependencies (frontend)
      run: |
        cd react-client
        npm install

    - name: Azure Login with OpenID Connect
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        allow-no-subscriptions: true

    - name: Extract Static WebApp Name and Get REACT_APP_SP_ROOT_SITE_URL from parameters.json
      id: extract_and_get_sp_root_site_url
      run: |
        STATIC_WEBAPP_NAME=$(jq -r '.parameters.staticSiteName.value' .github/workflows/parameters.json)
        echo "STATIC_WEBAPP_NAME=$STATIC_WEBAPP_NAME" >> $GITHUB_ENV
        
        REACT_APP_SP_ROOT_SITE_URL=$(az staticwebapp show --name $STATIC_WEBAPP_NAME --query "defaultHostname" -o tsv)
        echo "REACT_APP_SP_ROOT_SITE_URL=$REACT_APP_SP_ROOT_SITE_URL" >> $GITHUB_ENV

    - name: Build frontend
      run: |
        cd react-client
        CI=false npm run build # Set CI=false to avoid treating warnings as errors
      env: 
          REACT_APP_AZURE_APP_ID: 'a07be3cc-91fb-45d1-9564-77d2a9ac7be3'
          REACT_APP_AZURE_SERVER_APP_ID: 'a07be3cc-91fb-45d1-9564-77d2a9ac7be3'
          REACT_APP_SP_ROOT_SITE_URL: 'https://pkssandbox-admin.sharepoint.com/'
          SPE_CONTAINER_TYPE_ID: 'b7487f5e-3aec-02fe-1b67-f45441a7d315'
        
    # - name: Build frontend
    #   run: |
    #     cd react-client
    #     CI=false npm run build # Set CI=false to avoid treating warnings as errors
    #   env: 
    #       REACT_APP_AZURE_APP_ID: ${{ secrets.REACT_APP_AZURE_APP_ID }}
    #       REACT_APP_AZURE_SERVER_APP_ID: ${{ secrets.REACT_APP_AZURE_SERVER_APP_ID }}
    #       REACT_APP_SP_ROOT_SITE_URL: ${{ env.REACT_APP_SP_ROOT_SITE_URL }}
    #       SPE_CONTAINER_TYPE_ID: ${{ secrets.SPE_CONTAINER_TYPE_ID }}

    - name: Install dependencies (backend)
      run: |
        cd api
        npm install

    - name: Build backend
      run: |
        cd api
        CI=false npm run build # Set CI=false to avoid treating warnings as errors

    - name: Deploy to Azure Function App
      uses: azure/functions-action@v1
      with:
        app-name: 'SPE-DEMO'
        package: 'api'
        publish-profile: '<publishData><publishProfile profileName="SPE-DEMO - Web Deploy" publishMethod="MSDeploy" publishUrl="spe-demo.scm.azurewebsites.net:443" msdeploySite="SPE-DEMO" userName="$SPE-DEMO" userPWD="735XZHlGRctkrfzteaPjGegwNKyhwgZWtpP3c4BWlorBCQN4EHWNdhW5fah7" destinationAppUrl="https://spe-demo.azurewebsites.net" SQLServerDBConnectionString="" mySQLDBConnectionString="" hostingProviderForumLink="" controlPanelLink="https://portal.azure.com" webSystem="WebSites"><databases /></publishProfile><publishProfile profileName="SPE-DEMO - FTP" publishMethod="FTP" publishUrl="ftps://waws-prod-dm1-301.ftp.azurewebsites.windows.net/site/wwwroot" ftpPassiveMode="True" userName="SPE-DEMO\$SPE-DEMO" userPWD="735XZHlGRctkrfzteaPjGegwNKyhwgZWtpP3c4BWlorBCQN4EHWNdhW5fah7" destinationAppUrl="https://spe-demo.azurewebsites.net" SQLServerDBConnectionString="" mySQLDBConnectionString="" hostingProviderForumLink="" controlPanelLink="https://portal.azure.com" webSystem="WebSites"><databases /></publishProfile><publishProfile profileName="SPE-DEMO - Zip Deploy" publishMethod="ZipDeploy" publishUrl="spe-demo.scm.azurewebsites.net:443" userName="$SPE-DEMO" userPWD="735XZHlGRctkrfzteaPjGegwNKyhwgZWtpP3c4BWlorBCQN4EHWNdhW5fah7" destinationAppUrl="https://spe-demo.azurewebsites.net" SQLServerDBConnectionString="" mySQLDBConnectionString="" hostingProviderForumLink="" controlPanelLink="https://portal.azure.com" webSystem="WebSites"><databases /></publishProfile></publishData>'

    - name: Verify Functions Configuration
      run: |
        cd api
        if [ ! -f host.json ]; then
          echo "host.json not found!"
          exit 1
        fi
        if [ ! -d dist ]; then
          echo "Build output directory 'dist' not found!"
          exit 1
        fi

    - name: Get Azure Static Web App Token
      id: get_static_webapp_token
      run: |
        az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        STATIC_WEBAPP_TOKEN=$(az staticwebapp secrets list -n $STATIC_WEBAPP_NAME --query "properties.apiKey" -o tsv)
        echo "STATIC_WEBAPP_TOKEN=$STATIC_WEBAPP_TOKEN" >> $GITHUB_ENV

    - name: Deploy to Azure Static Web Apps
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ env.STATIC_WEBAPP_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: 'upload'
        app_location: 'react-client/build'
        api_location: 'api'
        # app_build_command: 'npm run build'
        # api_build_command: 'npm run build'
        # skip_app_build: true
        # skip_api_build: true

